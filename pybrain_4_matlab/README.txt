1) add the containg folder to your matlab path (or the parent folder+subfolders, whatever)

2) the code in pybrain_train/pybrain_test assumes that the script will be stored at location of the form:
    YOUR ROOT FOLDER/my_libs/LSTM/python/monohiddenlayer_regression_LSTM.py
    So go set root_source_folder in get_root_source_folder() (in ./config) to wherever it is that you've put the contents of the folder containing this README

3) the interface to pybrain is via two methods:

    pybrain_train(options, options_file_location, training_data_file_location, output_location)
    
    pybrain_predict(options, options_file_location, prediction_data_location, output_location, network_location)
    
        - The options object is a nx2 cell array, of the form:
            
            options = {'num_predictors',2;  <- number of input variables
           'num_outputs',2;                 <- number of output variables
           'num_training_epochs',1000;      <- number of training epochs for the ANN
           'num_hidden_neurons',20;         <- number of neurons in the hidden layer
           'hidden_neuron_type','lstm';     <- type of neuron used in hidden layer {'lstm', 'softmax', 'linear', 'sigmoid'} are your options
           'output_neuron_type','linear';   <- type of neuron used in the output layer {'lstm', 'softmax', 'linear', 'sigmoid'} are your options
           'compound_prediction',1;         <- for timeseries/sequential regression problems, uses generative "compound" prediction ie. where f = f(f(f(f(...),t-2),t-1),t) instead of f = f(tar(t-1),t) where tar(t) is the timeseries value at time t
           'teacher_forced_transient',100;  <- only for use with compound prediction, to flush out the initial transient in the network. so in this case, for the first hundred steps, compound prediction is not used.
           'classification',0;              <- 1 for classification problems, 0 for regression problems
           'regression',1;                  <- 1 for regression problems, 0 for classification problems
           'num_classes',0;                 <- only for use with classification, set to 0 otherwise. number of classes
          };
    
        - the options are printed to a .ini file at options_file_location, which is up to you to specify and name. just make sure the file ending is '.ini' please
        
        - the training_data_file_location is the full path to the training data
        - the prediction_data_location is the full path to the data you want to make predictions for
        - the output location is the directory where files generated by the pybrain lib will be placed
            - output for training is a record of the console output,console error, and the trained network (by default named trained_network.xml)
            - output for testing is a record of the console output, console error, and a csv containing the predictions

      
      
4) Training and test data should be supplied as a matrix in a .csv file (easy to do using matlab's dlmwrite()). The format should be:
        
        [predictor_variable columns sequence_number_column target_column]
        
    Sequence numbers can either be per-subject, or global, it doesn't matter - as long as adjacent sequences have different numbers. Each sample must have the sequence number and target of the entire sequence.
    
5) Predictions are returned in a .csv file of format:

        [predictions actual_targets]
        
    though the predictions are separated from the actual_targets by a semicolon, just in case you forget where one ends and the other begins.